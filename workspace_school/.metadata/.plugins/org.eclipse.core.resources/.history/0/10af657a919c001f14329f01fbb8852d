#include "main.h"

void SystemClock_Config(void);

int main(void)
{

  HAL_Init();
  UART_init();

  SystemClock_Config();

  while (1)
  {

  }

}

void Comp_init(void){

	// Unlock CSR register writing
	COMP2->CSR &= ~COMP_CSR_LOCK;

	// Vrefint should be 3.3 so we don't divide it i think
	COMP2->CSR &= ~SCALEN;

	// Blanking turned on to prevent current tripping, do I setup TIM15?
	COMP2->CSR &= ~COMP_CSR_BLANKING;
	COMP2->CSR |= COMP_CSR_BLANKING_2;

	// Set hysteresis
	COMP2->CSR &= ~COMP_CSR_HYST;
	COMP2->CSR |= COMP_CSR_HYST_1;

	// Comparator polarity
	COMP2->CSR &= ~COMP_CSR_POLARITY;

	// Comparator inputs not connected
	COMP2->CSR &= ~COMP_CSR_WINMODE;

	// Compare against 1/2 Vrefint
	COMP2->CSR &= ~COMP_CSR_INMSEL;
	COMP2->CSR |= COMP_CSR_INMSEL_0;

	// Fastest speed
	COMP2->CSR &= ~COMP_CSR_PWRMODE;

	// Enable comparator 2
	COMP2->CSR |= COMP_CSR_EN;

	// Lock CSR register writing
	COMP2->CSR &= COMP_CSR_LOCK;
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
