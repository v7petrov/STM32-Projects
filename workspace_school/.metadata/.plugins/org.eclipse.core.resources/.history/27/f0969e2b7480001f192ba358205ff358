#include "main.h"

void SystemClock_Config(void);

int main(void)
{
  // System init, but without using HAL_Init
  SystemClock_Config();

  // Enable KEYPAD clock (GPIOA)
  RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);

  // Enable LED clock (GPIOC)
  RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);

  // Initialize keypad
  keypad_init();

  while (1)
  {
    int number = getKeypadNumber();

    // 12 is A, 13 is B, 14 is C, 15 is D, 10 is *, 11 is #
    if(number != -1)  // If key pressed, show number on LEDs
    {
      // Display pressed number on LEDs (GPIOC pins 0-3)
      GPIOC->ODR = (number & (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3));
    }
  }
}

int getKeypadNumber(void) {
  // Look-up table for keypad values
  int keypad[4][4] = {
    {1, 2, 3, 12}, // 12 represents A
    {4, 5, 6, 13}, // 13 represents B
    {7, 8, 9, 14}, // 14 represents C
    {10, 0, 11, 15} // 10 = *, 11 = #, 15 = D
  };

  // Check if any row is pressed (GPIOA PA0 - PA3)
  if(GPIOA->IDR & (GPIO_IDR_ID0 | GPIO_IDR_ID1 | GPIO_IDR_ID2 | GPIO_IDR_ID3))  // If any of PA0 - PA3 is high
  {
    // Outer loop for stepping through each column
    for(int i = 4; i < 8; i++)
    {
      // Clear PA4 - PA7 (columns) and set current column high
      GPIOA->ODR &= ~(GPIO_ODR_OD4 | GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);
      GPIOA->ODR |= (1 << i);

      // Short delay to stabilize column setting (using an empty loop)
      for (int delay = 0; delay < 1000; delay++);

      // Inner loop for detecting pressed row
      for (int j = 0; j < 4; j++) {
        if (GPIOA->IDR & (1 << j)) {
          // Reset all columns and return the corresponding value
          GPIOA->ODR |= (GPIO_ODR_OD4 | GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);
          return keypad[i - 4][j];
        }
      }
    }
  }
  return -1; // Return -1 if no key is pressed
}

void keypad_init(void) {
  // Configure PA4-PA7 as outputs
  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
  GPIOA->MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0);

  // Configure PA0-PA3 as inputs
  GPIOA->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);

  // Configure PA0-PA3 as pull-down resistors
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);

  // Configure PA4-PA7 as push-pull outputs
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);

  // Set PA4-PA7 high initially
  GPIOA->ODR |= (GPIO_ODR_OD4 | GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}


void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif
