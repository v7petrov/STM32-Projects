#include "main.h"

void SystemClock_Config(void);
void keypadInit(void);


void delay(volatile uint32_t count) {
    while(count--);
}
int main(void) {

    HAL_Init();
    SystemClock_Config();

    keypadInit();


    // A1 LED Configuration
    GPIOC->MODER &= ~((3 << 0) | (3 << 2) | (3 << 4) | (3 << 6));
    GPIOC->MODER |= (1 << 0) | (1 << 2) | (1 << 4) | (1 << 6);

    GPIOC->OTYPER &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3));
    GPIOC->OSPEEDR |= (3 << 0) | (3 << 2) | (3 << 4) | (3 << 6);
    GPIOC->PUPDR &= ~((3 << 0) | (3 << 2) | (3 << 4) | (3 << 6));


    int key_pressed;

    while (1) {
        // Get the key pressed on the keypad
        key_pressed = keypadGetButton();

        if (key_pressed != -1) {
            int led_value = 0;
            switch (key_pressed) {
                case '0': led_value = 0; break;
                case '1': led_value = 1; break;
                case '2': led_value = 2; break;
                case '3': led_value = 3; break;
                case '4': led_value = 4; break;
                case '5': led_value = 5; break;
                case '6': led_value = 6; break;
                case '7': led_value = 7; break;
                case '8': led_value = 8; break;
                case '9': led_value = 9; break;
                case '*': led_value = 0; break;
                case '#': led_value = 0; break;
                default: led_value = 0;
            }

            //Display button press on LED
            GPIOC->ODR &= ~(0x0F);
            GPIOC->ODR |= (led_value & 0x0F);
        }

//        delay(100000);
    }
}



void keypadInit(void){
	//GPIO clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;


	GPIOC->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
	GPIOC->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0);

	GPIOC->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11);

	// set as pull down resistor so no float
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD8_1 | GPIO_PUPDR_PUPD9_1 | GPIO_PUPDR_PUPD10_1 | GPIO_PUPDR_PUPD11_1); // Set pull-down

}

int keypadGetButton(void){
	    const char keys[4][3] = {
	        {'1', '2', '3'},
	        {'4', '5', '6'},
	        {'7', '8', '9'},
	        {'*', '0', '#'}
	    };


	    for (int col = 0; col < 3; col++) {
	        GPIOC->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);

	        // Set ONE column high
	        GPIOC->ODR |= (1 << (col + 5)); //5 because we're using PC 5 6 7

	        for (int row = 0; row < 4; row++) {
	            if (GPIOC->IDR & (1 << (row + 8))) {
	                GPIOC->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);
	                return keys[row][col];
	            }
	        }
	    }
	    return -1;

}





void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
