#include "main.h"

volatile uint32_t pulse_duration = 0; // Global variable to store pulse duration

void SystemClock_Config(void);

int main(void)
{

  HAL_Init();
  UART_init();
  Comp_init();
  TIM2_OPM_init();

  SystemClock_Config();

  while (1)
  {

  }

}

// TIM2 interrupt handler
void TIM2_IRQHandler(void)
{
    if (TIM2->SR & TIM_SR_UIF) // Check if update interrupt flag is set
    {
        TIM2->SR &= ~TIM_SR_UIF;    // Clear update interrupt flag

        pulse_duration = TIM2->CNT; // Store pulse width in global variable

        TIM2->CNT = 0;              // Reset the timer count for the next pulse
    }
}

void TIM2_OPM_init(void){
	// Enable clock for TIM2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	// Configure TIM2 prescaler and ARR for maximum timing range
	TIM2->PSC = 7999;          // Prescaler for TIM2 (adjust as needed for timing resolution)
	TIM2->ARR = 0xFFFF;        // Auto-reload register to capture pulse duration

	// Set One-Pulse Mode (OPM)
	TIM2->CR1 |= TIM_CR1_OPM;  // Enable one-pulse mode

	// Configure TIM2 to trigger on COMP2's output
	TIM2->SMCR |= TIM_SMCR_TS_2 | TIM_SMCR_TS_0;  // Trigger from external source COMP2 output
	TIM2->SMCR |= TIM_SMCR_SMS_2;                 // Set to trigger mode

	// Enable interrupt on update event (to capture end of pulse)
	TIM2->DIER |= TIM_DIER_UIE;
	NVIC->ISER[0] = (1 << TIM2_IRQn);            // Enable TIM2 interrupt in NVIC
}

void Comp_init(void){

    // Unlock CSR register writing
    COMP2->CSR &= ~COMP_CSR_LOCK;

    // Set reference and blanking options
    COMP2->CSR &= ~COMP_CSR_SCALEN;
    COMP2->CSR &= ~COMP_CSR_BLANKING;
//    COMP2->CSR |= COMP_CSR_BLANKING_2;

    // Set hysteresis level
    COMP2->CSR &= ~COMP_CSR_HYST;
    COMP2->CSR |= COMP_CSR_HYST_0;		// Low hysteresis

    // Set comparator polarity and input
    COMP2->CSR &= ~COMP_CSR_POLARITY;
    COMP2->CSR &= ~COMP_CSR_WINMODE;
    COMP2->CSR |= COMP_CSR_INPSEL;              // In+ is PB6
    COMP2->CSR &= ~COMP_CSR_INMSEL;
    COMP2->CSR |= COMP_CSR_INMSEL_0;            // Compare against 1/2 Vrefint

    // Set power mode to fastest
    COMP2->CSR &= ~COMP_CSR_PWRMODE;

    // Enable COMP2 and lock the CSR register
    COMP2->CSR |= COMP_CSR_EN;
    COMP2->CSR |= COMP_CSR_LOCK;
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
