
ADCA6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001710  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001898  08001898  00002898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800190c  0800190c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  0800190c  0800190c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800190c  0800190c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800190c  0800190c  0000290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001910  08001910  00002910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001914  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  2000000c  08001920  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08001920  00003064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a07  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001031  00000000  00000000  00007a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00008a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000041f  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002425e  00000000  00000000  0000943f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000619b  00000000  00000000  0002d69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de26b  00000000  00000000  00033838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111aa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014c0  00000000  00000000  00111ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00112fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001880 	.word	0x08001880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001880 	.word	0x08001880

080001c8 <UART_init>:
 *      Author: USER
 */

#include "USART.h"

void UART_init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	// clock enable
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80001cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000280 <UART_init+0xb8>)
 80001ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000280 <UART_init+0xb8>)
 80001d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001d6:	6593      	str	r3, [r2, #88]	@ 0x58
	//enable interrupts
	USART2->CR1 |= (USART_CR1_RXNEIE);
 80001d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000284 <UART_init+0xbc>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a29      	ldr	r2, [pc, #164]	@ (8000284 <UART_init+0xbc>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6013      	str	r3, [r2, #0]
	//we sample over by 16
	USART2->CR1 &= ~USART_CR1_OVER8;
 80001e4:	4b27      	ldr	r3, [pc, #156]	@ (8000284 <UART_init+0xbc>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a26      	ldr	r2, [pc, #152]	@ (8000284 <UART_init+0xbc>)
 80001ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80001ee:	6013      	str	r3, [r2, #0]
	//2 0s stops the transfer
	USART2->CR2 &= ~USART_CR2_STOP;
 80001f0:	4b24      	ldr	r3, [pc, #144]	@ (8000284 <UART_init+0xbc>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a23      	ldr	r2, [pc, #140]	@ (8000284 <UART_init+0xbc>)
 80001f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80001fa:	6053      	str	r3, [r2, #4]
	//baud rate = SYSCLK/BR. over sample by 16 so this is it
	USART2->BRR = BR_DIV;
 80001fc:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <UART_init+0xbc>)
 80001fe:	22d0      	movs	r2, #208	@ 0xd0
 8000200:	60da      	str	r2, [r3, #12]
	// enable USART
	USART2->CR1 |= USART_CR1_UE;
 8000202:	4b20      	ldr	r3, [pc, #128]	@ (8000284 <UART_init+0xbc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a1f      	ldr	r2, [pc, #124]	@ (8000284 <UART_init+0xbc>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6013      	str	r3, [r2, #0]
	//enable transmit and receive
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
 800020e:	4b1d      	ldr	r3, [pc, #116]	@ (8000284 <UART_init+0xbc>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a1c      	ldr	r2, [pc, #112]	@ (8000284 <UART_init+0xbc>)
 8000214:	f043 030d 	orr.w	r3, r3, #13
 8000218:	6013      	str	r3, [r2, #0]

	//enable gpio clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800021a:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <UART_init+0xb8>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	4a18      	ldr	r2, [pc, #96]	@ (8000280 <UART_init+0xb8>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//set GPIO PA2, 3 to AF (alternate function) for USART2,
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000226:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000230:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000234:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (AF << GPIO_MODER_MODE2_Pos | AF << GPIO_MODER_MODE3_Pos);
 8000236:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000240:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000244:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000246:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000250:	f023 030c 	bic.w	r3, r3, #12
 8000254:	6053      	str	r3, [r2, #4]

	//as described above but with max speed
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000256:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000260:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000264:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |= (USART_AF << GPIO_AFRL_AFSEL2_Pos | USART_AF << GPIO_AFRL_AFSEL3_Pos);
 8000266:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000270:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000274:	6213      	str	r3, [r2, #32]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000
 8000284:	40004400 	.word	0x40004400

08000288 <USART_print>:

void USART_print(char* string){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	73fb      	strb	r3, [r7, #15]

	while(string[i] != 0){
 8000294:	e00f      	b.n	80002b6 <USART_print+0x2e>
		// Write to the USART_TDR if TXE is on
		while(!(USART2->ISR & USART_ISR_TXE));
 8000296:	bf00      	nop
 8000298:	4b0d      	ldr	r3, [pc, #52]	@ (80002d0 <USART_print+0x48>)
 800029a:	69db      	ldr	r3, [r3, #28]
 800029c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <USART_print+0x10>

		USART2->TDR = string[i];
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	781a      	ldrb	r2, [r3, #0]
 80002ac:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <USART_print+0x48>)
 80002ae:	851a      	strh	r2, [r3, #40]	@ 0x28
		i++;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	3301      	adds	r3, #1
 80002b4:	73fb      	strb	r3, [r7, #15]
	while(string[i] != 0){
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1e9      	bne.n	8000296 <USART_print+0xe>
	}

}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40004400 	.word	0x40004400

080002d4 <USART_ESC>:

void USART_ESC(char *string){
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	73fb      	strb	r3, [r7, #15]

	// sends esc press
	while(!(USART2->ISR & USART_ISR_TXE));
 80002e0:	bf00      	nop
 80002e2:	4b13      	ldr	r3, [pc, #76]	@ (8000330 <USART_ESC+0x5c>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <USART_ESC+0xe>
	USART2->TDR = ESC_KEY;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <USART_ESC+0x5c>)
 80002f0:	221b      	movs	r2, #27
 80002f2:	851a      	strh	r2, [r3, #40]	@ 0x28

	// sends rest of string
	while(string[i] != 0){
 80002f4:	e00f      	b.n	8000316 <USART_ESC+0x42>
		// waits until transmit is finished
		while(!(USART2->ISR & USART_ISR_TXE));
 80002f6:	bf00      	nop
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <USART_ESC+0x5c>)
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f9      	beq.n	80002f8 <USART_ESC+0x24>
		// loads the character into the transmit register
		USART2->TDR = string[i];
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	781a      	ldrb	r2, [r3, #0]
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <USART_ESC+0x5c>)
 800030e:	851a      	strh	r2, [r3, #40]	@ 0x28
		i++;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	3301      	adds	r3, #1
 8000314:	73fb      	strb	r3, [r7, #15]
	while(string[i] != 0){
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4413      	add	r3, r2
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1e9      	bne.n	80002f6 <USART_ESC+0x22>
	}
}
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40004400 	.word	0x40004400

08000334 <main>:
uint16_t ADC_val = 0;
uint16_t samples[sample_size];
uint8_t sample_index = 0;

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
    // Initialize the hardware abstraction layer
    HAL_Init();
 8000338:	f000 faef 	bl	800091a <HAL_Init>

    // Configure system clock
    SystemClock_Config();
 800033c:	f000 fa12 	bl	8000764 <SystemClock_Config>

    // Initialize UART and ADC peripherals
    UART_init();
 8000340:	f7ff ff42 	bl	80001c8 <UART_init>
    ADC_init();
 8000344:	f000 f946 	bl	80005d4 <ADC_init>

    // Main loop
    while (1)
    {
        // Check if the flag is set indicating an ADC conversion is complete
        if (flag) {
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <main+0x60>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0fb      	beq.n	8000348 <main+0x14>
            // Store the ADC value in the samples array
            samples[sample_index] = ADC_val;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <main+0x64>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <main+0x68>)
 8000358:	8819      	ldrh	r1, [r3, #0]
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <main+0x6c>)
 800035c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            sample_index++;
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <main+0x64>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <main+0x64>)
 800036a:	701a      	strb	r2, [r3, #0]

            // Check if sample array is filled
            if (sample_index == sample_size) {
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <main+0x64>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b14      	cmp	r3, #20
 8000372:	d104      	bne.n	800037e <main+0x4a>
                // Process and print the minimum, maximum, and average values
                PrintMinMaxAvg();
 8000374:	f000 f818 	bl	80003a8 <PrintMinMaxAvg>
                sample_index = 0; // Reset index for the next set of samples
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <main+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
            }

            // Clear the flag and start a new ADC conversion
            flag = 0;
 800037e:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <main+0x60>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
            ADC1->CR |= (ADC_CR_ADSTART); // Start a conversion
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <main+0x70>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <main+0x70>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6093      	str	r3, [r2, #8]
        if (flag) {
 8000390:	e7da      	b.n	8000348 <main+0x14>
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028
 8000398:	20000054 	.word	0x20000054
 800039c:	2000002a 	.word	0x2000002a
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	50040000 	.word	0x50040000

080003a8 <PrintMinMaxAvg>:
        }
    }
}

void PrintMinMaxAvg(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
    uint32_t min = MAX_DIGITAL;
 80003ae:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80003b2:	617b      	str	r3, [r7, #20]
    uint32_t max = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
    uint32_t sum = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
    uint32_t avg;

    // Calculate min, max, and sum of all sampled values
    for (uint8_t i = 0; i < sample_size; i++) {
 80003bc:	2300      	movs	r3, #0
 80003be:	72fb      	strb	r3, [r7, #11]
 80003c0:	e024      	b.n	800040c <PrintMinMaxAvg+0x64>
        if (samples[i] < min) {
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	4a3b      	ldr	r2, [pc, #236]	@ (80004b4 <PrintMinMaxAvg+0x10c>)
 80003c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003ca:	461a      	mov	r2, r3
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d904      	bls.n	80003dc <PrintMinMaxAvg+0x34>
            min = samples[i];
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	4a37      	ldr	r2, [pc, #220]	@ (80004b4 <PrintMinMaxAvg+0x10c>)
 80003d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003da:	617b      	str	r3, [r7, #20]
        }

        if (samples[i] > max) {
 80003dc:	7afb      	ldrb	r3, [r7, #11]
 80003de:	4a35      	ldr	r2, [pc, #212]	@ (80004b4 <PrintMinMaxAvg+0x10c>)
 80003e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003e4:	461a      	mov	r2, r3
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d204      	bcs.n	80003f6 <PrintMinMaxAvg+0x4e>
            max = samples[i];
 80003ec:	7afb      	ldrb	r3, [r7, #11]
 80003ee:	4a31      	ldr	r2, [pc, #196]	@ (80004b4 <PrintMinMaxAvg+0x10c>)
 80003f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f4:	613b      	str	r3, [r7, #16]
        }

        sum += samples[i];
 80003f6:	7afb      	ldrb	r3, [r7, #11]
 80003f8:	4a2e      	ldr	r2, [pc, #184]	@ (80004b4 <PrintMinMaxAvg+0x10c>)
 80003fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003fe:	461a      	mov	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4413      	add	r3, r2
 8000404:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < sample_size; i++) {
 8000406:	7afb      	ldrb	r3, [r7, #11]
 8000408:	3301      	adds	r3, #1
 800040a:	72fb      	strb	r3, [r7, #11]
 800040c:	7afb      	ldrb	r3, [r7, #11]
 800040e:	2b13      	cmp	r3, #19
 8000410:	d9d7      	bls.n	80003c2 <PrintMinMaxAvg+0x1a>
    }

    // Calculate average of sampled values
    avg = sum / sample_size;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	4a28      	ldr	r2, [pc, #160]	@ (80004b8 <PrintMinMaxAvg+0x110>)
 8000416:	fba2 2303 	umull	r2, r3, r2, r3
 800041a:	091b      	lsrs	r3, r3, #4
 800041c:	607b      	str	r3, [r7, #4]

    // Convert digital values to voltages in mV
    min = digital_conv(min);
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	f44f 724a 	mov.w	r2, #808	@ 0x328
 8000424:	fb02 f303 	mul.w	r3, r2, r3
 8000428:	f2a3 23bb 	subw	r3, r3, #699	@ 0x2bb
 800042c:	617b      	str	r3, [r7, #20]
    max = digital_conv(max);
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	f44f 724a 	mov.w	r2, #808	@ 0x328
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	f2a3 23bb 	subw	r3, r3, #699	@ 0x2bb
 800043c:	613b      	str	r3, [r7, #16]
    avg = digital_conv(avg);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f44f 724a 	mov.w	r2, #808	@ 0x328
 8000444:	fb02 f303 	mul.w	r3, r2, r3
 8000448:	f2a3 23bb 	subw	r3, r3, #699	@ 0x2bb
 800044c:	607b      	str	r3, [r7, #4]

    // Clear the screen and reset cursor
    USART_ESC(CLR_KEY);
 800044e:	481b      	ldr	r0, [pc, #108]	@ (80004bc <PrintMinMaxAvg+0x114>)
 8000450:	f7ff ff40 	bl	80002d4 <USART_ESC>
    USART_ESC(RST_KEY);
 8000454:	481a      	ldr	r0, [pc, #104]	@ (80004c0 <PrintMinMaxAvg+0x118>)
 8000456:	f7ff ff3d 	bl	80002d4 <USART_ESC>

    // Print minimum, maximum, and average values to the terminal
    USART_print("Minimum: ");
 800045a:	481a      	ldr	r0, [pc, #104]	@ (80004c4 <PrintMinMaxAvg+0x11c>)
 800045c:	f7ff ff14 	bl	8000288 <USART_print>
    USART_print(DigitToStr(min));
 8000460:	6978      	ldr	r0, [r7, #20]
 8000462:	f000 f837 	bl	80004d4 <DigitToStr>
 8000466:	4603      	mov	r3, r0
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff0d 	bl	8000288 <USART_print>
    USART_print("     ");
 800046e:	4816      	ldr	r0, [pc, #88]	@ (80004c8 <PrintMinMaxAvg+0x120>)
 8000470:	f7ff ff0a 	bl	8000288 <USART_print>
    USART_print("Maximum: ");
 8000474:	4815      	ldr	r0, [pc, #84]	@ (80004cc <PrintMinMaxAvg+0x124>)
 8000476:	f7ff ff07 	bl	8000288 <USART_print>
    USART_print(DigitToStr(max));
 800047a:	6938      	ldr	r0, [r7, #16]
 800047c:	f000 f82a 	bl	80004d4 <DigitToStr>
 8000480:	4603      	mov	r3, r0
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff00 	bl	8000288 <USART_print>
    USART_print("     ");
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <PrintMinMaxAvg+0x120>)
 800048a:	f7ff fefd 	bl	8000288 <USART_print>
    USART_print("Average: ");
 800048e:	4810      	ldr	r0, [pc, #64]	@ (80004d0 <PrintMinMaxAvg+0x128>)
 8000490:	f7ff fefa 	bl	8000288 <USART_print>
    USART_print(DigitToStr(avg));
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f81d 	bl	80004d4 <DigitToStr>
 800049a:	4603      	mov	r3, r0
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fef3 	bl	8000288 <USART_print>
    USART_print("     ");
 80004a2:	4809      	ldr	r0, [pc, #36]	@ (80004c8 <PrintMinMaxAvg+0x120>)
 80004a4:	f7ff fef0 	bl	8000288 <USART_print>

    // Add delay to allow values to be read on the terminal
    USART_delay();
 80004a8:	f000 f946 	bl	8000738 <USART_delay>
}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	cccccccd 	.word	0xcccccccd
 80004bc:	08001898 	.word	0x08001898
 80004c0:	0800189c 	.word	0x0800189c
 80004c4:	080018a0 	.word	0x080018a0
 80004c8:	080018ac 	.word	0x080018ac
 80004cc:	080018b4 	.word	0x080018b4
 80004d0:	080018c0 	.word	0x080018c0

080004d4 <DigitToStr>:

char* DigitToStr(uint32_t digit) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    static char result[6];

    // Scale down to get a 3.3V equivalent
    digit = digit / 1000;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a28      	ldr	r2, [pc, #160]	@ (8000580 <DigitToStr+0xac>)
 80004e0:	fba2 2303 	umull	r2, r3, r2, r3
 80004e4:	099b      	lsrs	r3, r3, #6
 80004e6:	607b      	str	r3, [r7, #4]

    // Convert each digit to a character and place in result string
    result[0] = (digit / 1000) + '0';          // Thousands
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a25      	ldr	r2, [pc, #148]	@ (8000580 <DigitToStr+0xac>)
 80004ec:	fba2 2303 	umull	r2, r3, r2, r3
 80004f0:	099b      	lsrs	r3, r3, #6
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	3330      	adds	r3, #48	@ 0x30
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <DigitToStr+0xb0>)
 80004fa:	701a      	strb	r2, [r3, #0]
    result[1] = '.';
 80004fc:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <DigitToStr+0xb0>)
 80004fe:	222e      	movs	r2, #46	@ 0x2e
 8000500:	705a      	strb	r2, [r3, #1]
    result[2] = ((digit / 100) % 10) + '0';    // Hundreds place
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a20      	ldr	r2, [pc, #128]	@ (8000588 <DigitToStr+0xb4>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0959      	lsrs	r1, r3, #5
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <DigitToStr+0xb8>)
 800050e:	fba3 2301 	umull	r2, r3, r3, r1
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1aca      	subs	r2, r1, r3
 800051e:	b2d3      	uxtb	r3, r2
 8000520:	3330      	adds	r3, #48	@ 0x30
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <DigitToStr+0xb0>)
 8000526:	709a      	strb	r2, [r3, #2]
    result[3] = ((digit / 10) % 10) + '0';     // Tens place
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <DigitToStr+0xb8>)
 800052c:	fba2 2303 	umull	r2, r3, r2, r3
 8000530:	08d9      	lsrs	r1, r3, #3
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <DigitToStr+0xb8>)
 8000534:	fba3 2301 	umull	r2, r3, r3, r1
 8000538:	08da      	lsrs	r2, r3, #3
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	1aca      	subs	r2, r1, r3
 8000544:	b2d3      	uxtb	r3, r2
 8000546:	3330      	adds	r3, #48	@ 0x30
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <DigitToStr+0xb0>)
 800054c:	70da      	strb	r2, [r3, #3]
    result[4] = (digit % 10) + '0';            // Units place
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <DigitToStr+0xb8>)
 8000552:	fba3 2301 	umull	r2, r3, r3, r1
 8000556:	08da      	lsrs	r2, r3, #3
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	1aca      	subs	r2, r1, r3
 8000562:	b2d3      	uxtb	r3, r2
 8000564:	3330      	adds	r3, #48	@ 0x30
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <DigitToStr+0xb0>)
 800056a:	711a      	strb	r2, [r3, #4]
    result[5] = '\0';                          // Null terminator
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <DigitToStr+0xb0>)
 800056e:	2200      	movs	r2, #0
 8000570:	715a      	strb	r2, [r3, #5]

    return result;
 8000572:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <DigitToStr+0xb0>)
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	10624dd3 	.word	0x10624dd3
 8000584:	20000058 	.word	0x20000058
 8000588:	51eb851f 	.word	0x51eb851f
 800058c:	cccccccd 	.word	0xcccccccd

08000590 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
    // Check if ADC end-of-conversion flag is set
    if (ADC1->ISR & ADC_ISR_EOC) {
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <ADC1_2_IRQHandler+0x38>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	2b00      	cmp	r3, #0
 800059e:	d007      	beq.n	80005b0 <ADC1_2_IRQHandler+0x20>
        ADC_val = ADC1->DR; // Read conversion result from ADC data register
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <ADC1_2_IRQHandler+0x38>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <ADC1_2_IRQHandler+0x3c>)
 80005a8:	801a      	strh	r2, [r3, #0]
        flag = 1;           // Set global flag to indicate a new value is ready
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <ADC1_2_IRQHandler+0x40>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    }

    // Clear the end-of-conversion flag
    ADC1->ISR &= ~ADC_ISR_EOC;
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <ADC1_2_IRQHandler+0x38>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <ADC1_2_IRQHandler+0x38>)
 80005b6:	f023 0304 	bic.w	r3, r3, #4
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	50040000 	.word	0x50040000
 80005cc:	2000002a 	.word	0x2000002a
 80005d0:	20000028 	.word	0x20000028

080005d4 <ADC_init>:

void ADC_init(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    // Enable ADC clock
    RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80005d8:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <ADC_init+0x128>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005dc:	4a47      	ldr	r2, [pc, #284]	@ (80006fc <ADC_init+0x128>)
 80005de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005e2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set ADC clock to HCLK/1 synchronous mode
    ADC123_COMMON->CCR = (1 << ADC_CCR_CKMODE_Pos);
 80005e4:	4b46      	ldr	r3, [pc, #280]	@ (8000700 <ADC_init+0x12c>)
 80005e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ea:	609a      	str	r2, [r3, #8]

    // Power up ADC voltage regulator
    ADC1->CR &= ~(ADC_CR_DEEPPWD);
 80005ec:	4b45      	ldr	r3, [pc, #276]	@ (8000704 <ADC_init+0x130>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4a44      	ldr	r2, [pc, #272]	@ (8000704 <ADC_init+0x130>)
 80005f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80005f6:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (ADC_CR_ADVREGEN);
 80005f8:	4b42      	ldr	r3, [pc, #264]	@ (8000704 <ADC_init+0x130>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	4a41      	ldr	r2, [pc, #260]	@ (8000704 <ADC_init+0x130>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6093      	str	r3, [r2, #8]

    // Wait for ADC voltage regulator to stabilize
    ADC_delay();
 8000604:	f000 f882 	bl	800070c <ADC_delay>

    // Configure ADC for single-ended mode on channel 5 (PA0)
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8000608:	4b3e      	ldr	r3, [pc, #248]	@ (8000704 <ADC_init+0x130>)
 800060a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800060e:	4a3d      	ldr	r2, [pc, #244]	@ (8000704 <ADC_init+0x130>)
 8000610:	f023 0320 	bic.w	r3, r3, #32
 8000614:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    // Calibrate the ADC
    ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000618:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <ADC_init+0x130>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	4a39      	ldr	r2, [pc, #228]	@ (8000704 <ADC_init+0x130>)
 800061e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADCAL; // Start calibration
 8000628:	4b36      	ldr	r3, [pc, #216]	@ (8000704 <ADC_init+0x130>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a35      	ldr	r2, [pc, #212]	@ (8000704 <ADC_init+0x130>)
 800062e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000632:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to finish
 8000634:	bf00      	nop
 8000636:	4b33      	ldr	r3, [pc, #204]	@ (8000704 <ADC_init+0x130>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	dbfb      	blt.n	8000636 <ADC_init+0x62>

    // Enable ADC and wait for it to be ready
    ADC1->ISR |= (ADC_ISR_ADRDY);
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <ADC_init+0x130>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	@ (8000704 <ADC_init+0x130>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
    ADC1->CR |= (ADC_CR_ADEN);
 800064a:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <ADC_init+0x130>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <ADC_init+0x130>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8000656:	bf00      	nop
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <ADC_init+0x130>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <ADC_init+0x84>

    // Set up ADC to sample channel 5 once in a sequence
    ADC1->SQR1 = (CHANNEL5 << ADC_SQR1_SQ1_Pos);
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <ADC_init+0x130>)
 8000666:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800066a:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->CFGR = 0;
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <ADC_init+0x130>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]

    // Configure sample time
    ADC1->SMPR1 = ~(ADC_SMPR1_SMP5);
 8000672:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <ADC_init+0x130>)
 8000674:	f46f 3260 	mvn.w	r2, #229376	@ 0x38000
 8000678:	615a      	str	r2, [r3, #20]

    // Enable interrupts on end of conversion
    ADC1->IER |= (ADC_IER_EOC);
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <ADC_init+0x130>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <ADC_init+0x130>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6053      	str	r3, [r2, #4]
    ADC1->ISR |= (ADC_ISR_EOC);
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <ADC_init+0x130>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <ADC_init+0x130>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6013      	str	r3, [r2, #0]

    // Configure GPIO for channel 5
    RCC->AHB2ENR    |= RCC_AHB2ENR_GPIOAEN;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <ADC_init+0x128>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <ADC_init+0x128>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOA->ASCR    |= (GPIO_ASCR_ASC0); // Connect analog switch to ADC input
 800069e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    GPIOA->MODER   &= ~(GPIO_MODER_MODE0);
 80006ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |= (GPIO_MODER_MODE0); 	// Analog mode
 80006be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006c8:	f043 0303 	orr.w	r3, r3, #3
 80006cc:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED0);	// Max speed
 80006ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006d8:	f043 0303 	orr.w	r3, r3, #3
 80006dc:	6093      	str	r3, [r2, #8]

    // Enable interrupt in NVIC
    NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F));
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <ADC_init+0x134>)
 80006e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006e4:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006e6:	b662      	cpsie	i
}
 80006e8:	bf00      	nop
    __enable_irq();

    // Start an ADC conversion
    ADC1->CR |= (ADC_CR_ADSTART);
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <ADC_init+0x130>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <ADC_init+0x130>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6093      	str	r3, [r2, #8]
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	50040300 	.word	0x50040300
 8000704:	50040000 	.word	0x50040000
 8000708:	e000e100 	.word	0xe000e100

0800070c <ADC_delay>:

void ADC_delay(void) {   // Delay for ADC setup
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < INIT_DELAY; i++);
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	e002      	b.n	800071e <ADC_delay+0x12>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000724:	4293      	cmp	r3, r2
 8000726:	d9f7      	bls.n	8000718 <ADC_delay+0xc>
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <USART_delay>:

void USART_delay(void) { // Delay to allow USART output to be visible
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < LONG_DELAY; i++);
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e002      	b.n	800074a <USART_delay+0x12>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3301      	adds	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <USART_delay+0x28>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d9f8      	bls.n	8000744 <USART_delay+0xc>
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	00030d3f 	.word	0x00030d3f

08000764 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	@ 0x58
 8000768:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2244      	movs	r2, #68	@ 0x44
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f858 	bl	8001828 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000786:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078a:	f000 fa2f 	bl	8000bec <HAL_PWREx_ControlVoltageScaling>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x34>
        Error_Handler();
 8000794:	f000 f82c 	bl	80007f0 <Error_Handler>
    }

    // Initializes the RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000798:	2310      	movs	r3, #16
 800079a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80007a4:	2390      	movs	r3, #144	@ 0x90
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fa71 	bl	8000c98 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x5c>
        Error_Handler();
 80007bc:	f000 f818 	bl	80007f0 <Error_Handler>
    }

    // Initialize CPU, AHB and APB clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	603b      	str	r3, [r7, #0]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007d4:	463b      	mov	r3, r7
 80007d6:	2101      	movs	r1, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fe39 	bl	8001450 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x84>
        Error_Handler();
 80007e4:	f000 f804 	bl	80007f0 <Error_Handler>
    }
}
 80007e8:	bf00      	nop
 80007ea:	3758      	adds	r7, #88	@ 0x58
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
    __disable_irq();
    while (1) {
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	@ 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	@ 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <NMI_Handler+0x4>

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <MemManage_Handler+0x4>

0800085c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <UsageFault_Handler+0x4>

0800086c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f893 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff ffea 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f000 ff9f 	bl	8001838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fa:	f7ff fd1b 	bl	8000334 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000900:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	08001914 	.word	0x08001914
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	20000064 	.word	0x20000064

08000918 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC3_IRQHandler>

0800091a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f91f 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092a:	200f      	movs	r0, #15
 800092c:	f000 f80e 	bl	800094c <HAL_InitTick>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	e001      	b.n	8000940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093c:	f7ff ff5e 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000940:	79fb      	ldrb	r3, [r7, #7]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <HAL_InitTick+0x6c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d023      	beq.n	80009a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <HAL_InitTick+0x70>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <HAL_InitTick+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f91d 	bl	8000bb6 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10f      	bne.n	80009a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d809      	bhi.n	800099c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f8f5 	bl	8000b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_InitTick+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	e007      	b.n	80009ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e004      	b.n	80009ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e001      	b.n	80009ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000060 	.word	0x20000060

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000060 	.word	0x20000060

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff47 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff5c 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb0 	bl	8000b24 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d130      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfc:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c08:	d038      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2232      	movs	r2, #50	@ 0x32
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	0c9b      	lsrs	r3, r3, #18
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	e002      	b.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c44:	d102      	bne.n	8000c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f2      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c58:	d110      	bne.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e00f      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c6a:	d007      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c74:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	20000000 	.word	0x20000000
 8000c94:	431bde83 	.word	0x431bde83

08000c98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e3ca      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000caa:	4b97      	ldr	r3, [pc, #604]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb4:	4b94      	ldr	r3, [pc, #592]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80e4 	beq.w	8000e94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d007      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x4a>
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	2b0c      	cmp	r3, #12
 8000cd6:	f040 808b 	bne.w	8000df0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f040 8087 	bne.w	8000df0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce2:	4b89      	ldr	r3, [pc, #548]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_RCC_OscConfig+0x62>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e3a2      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
 8000cfe:	4b82      	ldr	r3, [pc, #520]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d004      	beq.n	8000d14 <HAL_RCC_OscConfig+0x7c>
 8000d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d12:	e005      	b.n	8000d20 <HAL_RCC_OscConfig+0x88>
 8000d14:	4b7c      	ldr	r3, [pc, #496]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d223      	bcs.n	8000d6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fd1d 	bl	8001768 <RCC_SetFlashLatencyFromMSIRange>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e383      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d38:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a72      	ldr	r2, [pc, #456]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b70      	ldr	r3, [pc, #448]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	496d      	ldr	r1, [pc, #436]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d56:	4b6c      	ldr	r3, [pc, #432]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4968      	ldr	r1, [pc, #416]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	604b      	str	r3, [r1, #4]
 8000d6a:	e025      	b.n	8000db8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6c:	4b66      	ldr	r3, [pc, #408]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a65      	ldr	r2, [pc, #404]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4960      	ldr	r1, [pc, #384]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	495b      	ldr	r1, [pc, #364]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fcdd 	bl	8001768 <RCC_SetFlashLatencyFromMSIRange>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e343      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000db8:	f000 fc4a 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	4950      	ldr	r1, [pc, #320]	@ (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000dca:	5ccb      	ldrb	r3, [r1, r3]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f10 <HAL_RCC_OscConfig+0x278>)
 8000dd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <HAL_RCC_OscConfig+0x27c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fdb5 	bl	800094c <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d052      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	e327      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d032      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000df8:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a42      	ldr	r2, [pc, #264]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fdf2 	bl	80009ec <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fdee 	bl	80009ec <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e310      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2a:	4b37      	ldr	r3, [pc, #220]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a36      	ldr	r2, [pc, #216]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	4b34      	ldr	r3, [pc, #208]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4931      	ldr	r1, [pc, #196]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e48:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	492c      	ldr	r1, [pc, #176]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	e01a      	b.n	8000e94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a29      	ldr	r2, [pc, #164]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fdbf 	bl	80009ec <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e72:	f7ff fdbb 	bl	80009ec <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e2dd      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e84:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f0      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1da>
 8000e90:	e000      	b.n	8000e94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d074      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x21a>
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d10e      	bne.n	8000eca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d10b      	bne.n	8000eca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d064      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d160      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e2ba      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x24a>
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e026      	b.n	8000f30 <HAL_RCC_OscConfig+0x298>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eea:	d115      	bne.n	8000f18 <HAL_RCC_OscConfig+0x280>
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a02      	ldr	r2, [pc, #8]	@ (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e014      	b.n	8000f30 <HAL_RCC_OscConfig+0x298>
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	080018cc 	.word	0x080018cc
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000004 	.word	0x20000004
 8000f18:	4ba0      	ldr	r3, [pc, #640]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a9c      	ldr	r2, [pc, #624]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fd58 	bl	80009ec <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fd54 	bl	80009ec <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e276      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f52:	4b92      	ldr	r3, [pc, #584]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2a8>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fd44 	bl	80009ec <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fd40 	bl	80009ec <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	@ 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e262      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d0>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d060      	beq.n	8001058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x310>
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d119      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d116      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x328>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e23f      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	4973      	ldr	r1, [pc, #460]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd4:	e040      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d023      	beq.n	8001026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fde:	4b6f      	ldr	r3, [pc, #444]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fcff 	bl	80009ec <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fcfb 	bl	80009ec <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e21d      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001004:	4b65      	ldr	r3, [pc, #404]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b62      	ldr	r3, [pc, #392]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	061b      	lsls	r3, r3, #24
 800101e:	495f      	ldr	r1, [pc, #380]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e018      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a5c      	ldr	r2, [pc, #368]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800102c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fcdb 	bl	80009ec <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fcd7 	bl	80009ec <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1f9      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800104c:	4b53      	ldr	r3, [pc, #332]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03c      	beq.n	80010de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106c:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	4a4a      	ldr	r2, [pc, #296]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107c:	f7ff fcb6 	bl	80009ec <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fcb2 	bl	80009ec <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1d4      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001096:	4b41      	ldr	r3, [pc, #260]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ef      	beq.n	8001084 <HAL_RCC_OscConfig+0x3ec>
 80010a4:	e01b      	b.n	80010de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a6:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ac:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fc99 	bl	80009ec <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fc95 	bl	80009ec <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1b7      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ef      	bne.n	80010be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a6 	beq.w	8001238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10d      	bne.n	8001118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001100:	4a26      	ldr	r2, [pc, #152]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001106:	6593      	str	r3, [r2, #88]	@ 0x58
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001114:	2301      	movs	r3, #1
 8001116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d118      	bne.n	8001156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc5c 	bl	80009ec <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001138:	f7ff fc58 	bl	80009ec <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e17a      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_RCC_OscConfig+0x508>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d8>
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800116e:	e029      	b.n	80011c4 <HAL_RCC_OscConfig+0x52c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d115      	bne.n	80011a4 <HAL_RCC_OscConfig+0x50c>
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118e:	4a03      	ldr	r2, [pc, #12]	@ (800119c <HAL_RCC_OscConfig+0x504>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001198:	e014      	b.n	80011c4 <HAL_RCC_OscConfig+0x52c>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40007000 	.word	0x40007000
 80011a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011aa:	4a9b      	ldr	r2, [pc, #620]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011b4:	4b98      	ldr	r3, [pc, #608]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ba:	4a97      	ldr	r2, [pc, #604]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011cc:	f7ff fc0e 	bl	80009ec <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fc0a 	bl	80009ec <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e12a      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ed      	beq.n	80011d4 <HAL_RCC_OscConfig+0x53c>
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fbf7 	bl	80009ec <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fbf3 	bl	80009ec <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e113      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001218:	4b7f      	ldr	r3, [pc, #508]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1ed      	bne.n	8001202 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b7a      	ldr	r3, [pc, #488]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	4a79      	ldr	r2, [pc, #484]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80fe 	beq.w	800143e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001246:	2b02      	cmp	r3, #2
 8001248:	f040 80d0 	bne.w	80013ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800124c:	4b72      	ldr	r3, [pc, #456]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125c:	429a      	cmp	r2, r3
 800125e:	d130      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	3b01      	subs	r3, #1
 800126c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800126e:	429a      	cmp	r2, r3
 8001270:	d127      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d11f      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800128c:	2a07      	cmp	r2, #7
 800128e:	bf14      	ite	ne
 8001290:	2201      	movne	r2, #1
 8001292:	2200      	moveq	r2, #0
 8001294:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001296:	4293      	cmp	r3, r2
 8001298:	d113      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	3b01      	subs	r3, #1
 80012a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	3b01      	subs	r3, #1
 80012bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d06e      	beq.n	80013a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	d069      	beq.n	800139c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0ad      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80012ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012f0:	f7ff fb7c 	bl	80009ec <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb78 	bl	80009ec <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e09a      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800130a:	4b43      	ldr	r3, [pc, #268]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001316:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b40      	ldr	r3, [pc, #256]	@ (800141c <HAL_RCC_OscConfig+0x784>)
 800131c:	4013      	ands	r3, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001326:	3a01      	subs	r2, #1
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001338:	0852      	lsrs	r2, r2, #1
 800133a:	3a01      	subs	r2, #1
 800133c:	0552      	lsls	r2, r2, #21
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001344:	0852      	lsrs	r2, r2, #1
 8001346:	3a01      	subs	r2, #1
 8001348:	0652      	lsls	r2, r2, #25
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001350:	0912      	lsrs	r2, r2, #4
 8001352:	0452      	lsls	r2, r2, #17
 8001354:	430a      	orrs	r2, r1
 8001356:	4930      	ldr	r1, [pc, #192]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 8001358:	4313      	orrs	r3, r2
 800135a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a2a      	ldr	r2, [pc, #168]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001374:	f7ff fb3a 	bl	80009ec <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb36 	bl	80009ec <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e058      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139a:	e050      	b.n	800143e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e04f      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d148      	bne.n	800143e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a16      	ldr	r2, [pc, #88]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013c4:	f7ff fb12 	bl	80009ec <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb0e 	bl	80009ec <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e030      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x734>
 80013ea:	e028      	b.n	800143e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d023      	beq.n	800143a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_RCC_OscConfig+0x780>)
 80013f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff faf5 	bl	80009ec <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001404:	e00c      	b.n	8001420 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff faf1 	bl	80009ec <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d905      	bls.n	8001420 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e013      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
 8001418:	40021000 	.word	0x40021000
 800141c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_RCC_OscConfig+0x7b0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ec      	bne.n	8001406 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_RCC_OscConfig+0x7b0>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	4905      	ldr	r1, [pc, #20]	@ (8001448 <HAL_RCC_OscConfig+0x7b0>)
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_RCC_OscConfig+0x7b4>)
 8001434:	4013      	ands	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
 8001438:	e001      	b.n	800143e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	feeefffc 	.word	0xfeeefffc

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0e7      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d910      	bls.n	8001494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b72      	ldr	r3, [pc, #456]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0207 	bic.w	r2, r3, #7
 800147a:	4970      	ldr	r1, [pc, #448]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b6e      	ldr	r3, [pc, #440]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0cf      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d010      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	4b66      	ldr	r3, [pc, #408]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d908      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4960      	ldr	r1, [pc, #384]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d04c      	beq.n	8001568 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d121      	bne.n	8001526 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0a6      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	4b54      	ldr	r3, [pc, #336]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d115      	bne.n	8001526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e09a      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001506:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e08e      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e086      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001526:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f023 0203 	bic.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4943      	ldr	r1, [pc, #268]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001538:	f7ff fa58 	bl	80009ec <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	e00a      	b.n	8001556 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff fa54 	bl	80009ec <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e06e      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 020c 	and.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	429a      	cmp	r2, r3
 8001566:	d1eb      	bne.n	8001540 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001580:	429a      	cmp	r2, r3
 8001582:	d208      	bcs.n	8001596 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	492b      	ldr	r1, [pc, #172]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d210      	bcs.n	80015c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 0207 	bic.w	r2, r3, #7
 80015ac:	4923      	ldr	r1, [pc, #140]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_RCC_ClockConfig+0x1ec>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e036      	b.n	8001634 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4918      	ldr	r1, [pc, #96]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4910      	ldr	r1, [pc, #64]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001604:	f000 f824 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	490b      	ldr	r1, [pc, #44]	@ (8001644 <HAL_RCC_ClockConfig+0x1f4>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <HAL_RCC_ClockConfig+0x1f8>)
 8001622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1fc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f98f 	bl	800094c <HAL_InitTick>
 800162e:	4603      	mov	r3, r0
 8001630:	72fb      	strb	r3, [r7, #11]

  return status;
 8001632:	7afb      	ldrb	r3, [r7, #11]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	080018cc 	.word	0x080018cc
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b3e      	ldr	r3, [pc, #248]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x34>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d121      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d11e      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001684:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	e005      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016ac:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d102      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	e004      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016d4:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x114>)
 80016d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d134      	bne.n	8001748 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d003      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0xac>
 80016f4:	e005      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x110>)
 80016f8:	617b      	str	r3, [r7, #20]
      break;
 80016fa:	e005      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x114>)
 80016fe:	617b      	str	r3, [r7, #20]
      break;
 8001700:	e002      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	617b      	str	r3, [r7, #20]
      break;
 8001706:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	fb03 f202 	mul.w	r2, r3, r2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x108>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	0e5b      	lsrs	r3, r3, #25
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	3301      	adds	r3, #1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001748:	69bb      	ldr	r3, [r7, #24]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	080018dc 	.word	0x080018dc
 8001760:	00f42400 	.word	0x00f42400
 8001764:	007a1200 	.word	0x007a1200

08001768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001774:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001780:	f7ff fa26 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 8001784:	6178      	str	r0, [r7, #20]
 8001786:	e014      	b.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a24      	ldr	r2, [pc, #144]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017a0:	f7ff fa16 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 80017a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017b8:	d10b      	bne.n	80017d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b80      	cmp	r3, #128	@ 0x80
 80017be:	d919      	bls.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80017c4:	d902      	bls.n	80017cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017c6:	2302      	movs	r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	e013      	b.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e010      	b.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b80      	cmp	r3, #128	@ 0x80
 80017d6:	d902      	bls.n	80017de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017d8:	2303      	movs	r3, #3
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e00a      	b.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	d102      	bne.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e004      	b.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b70      	cmp	r3, #112	@ 0x70
 80017ee:	d101      	bne.n	80017f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0207 	bic.w	r2, r3, #7
 80017fc:	4909      	ldr	r1, [pc, #36]	@ (8001824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	40022000 	.word	0x40022000

08001828 <memset>:
 8001828:	4402      	add	r2, r0
 800182a:	4603      	mov	r3, r0
 800182c:	4293      	cmp	r3, r2
 800182e:	d100      	bne.n	8001832 <memset+0xa>
 8001830:	4770      	bx	lr
 8001832:	f803 1b01 	strb.w	r1, [r3], #1
 8001836:	e7f9      	b.n	800182c <memset+0x4>

08001838 <__libc_init_array>:
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4d0d      	ldr	r5, [pc, #52]	@ (8001870 <__libc_init_array+0x38>)
 800183c:	4c0d      	ldr	r4, [pc, #52]	@ (8001874 <__libc_init_array+0x3c>)
 800183e:	1b64      	subs	r4, r4, r5
 8001840:	10a4      	asrs	r4, r4, #2
 8001842:	2600      	movs	r6, #0
 8001844:	42a6      	cmp	r6, r4
 8001846:	d109      	bne.n	800185c <__libc_init_array+0x24>
 8001848:	4d0b      	ldr	r5, [pc, #44]	@ (8001878 <__libc_init_array+0x40>)
 800184a:	4c0c      	ldr	r4, [pc, #48]	@ (800187c <__libc_init_array+0x44>)
 800184c:	f000 f818 	bl	8001880 <_init>
 8001850:	1b64      	subs	r4, r4, r5
 8001852:	10a4      	asrs	r4, r4, #2
 8001854:	2600      	movs	r6, #0
 8001856:	42a6      	cmp	r6, r4
 8001858:	d105      	bne.n	8001866 <__libc_init_array+0x2e>
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001860:	4798      	blx	r3
 8001862:	3601      	adds	r6, #1
 8001864:	e7ee      	b.n	8001844 <__libc_init_array+0xc>
 8001866:	f855 3b04 	ldr.w	r3, [r5], #4
 800186a:	4798      	blx	r3
 800186c:	3601      	adds	r6, #1
 800186e:	e7f2      	b.n	8001856 <__libc_init_array+0x1e>
 8001870:	0800190c 	.word	0x0800190c
 8001874:	0800190c 	.word	0x0800190c
 8001878:	0800190c 	.word	0x0800190c
 800187c:	08001910 	.word	0x08001910

08001880 <_init>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr

0800188c <_fini>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	bf00      	nop
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr
