
ExecutionTiming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001398  08001398  00002398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d8  080013d8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080013d8  080013d8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013d8  080013d8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d8  080013d8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013dc  080013dc  000023dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080013e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080013ec  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080013ec  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d5e  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e67  00000000  00000000  00006d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  00007c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003d9  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fc1  00000000  00000000  00008529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005745  00000000  00000000  0002c4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfbe  00000000  00000000  00031c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fbed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000136c  00000000  00000000  0010fc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00110f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001380 	.word	0x08001380

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001380 	.word	0x08001380

080001c8 <main>:

void SystemClock_Config(void);


int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0


 HAL_Init();
 80001ce:	f000 f924 	bl	800041a <HAL_Init>


 SystemClock_Config();
 80001d2:	f000 f847 	bl	8000264 <SystemClock_Config>



//enable the clock for GPIOC
 RCC -> AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 80001d6:	4b21      	ldr	r3, [pc, #132]	@ (800025c <main+0x94>)
 80001d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001da:	4a20      	ldr	r2, [pc, #128]	@ (800025c <main+0x94>)
 80001dc:	f043 0304 	orr.w	r3, r3, #4
 80001e0:	64d3      	str	r3, [r2, #76]	@ 0x4c


 //configure P C0, C1, C2, C3

 GPIOC -> MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear mode register pins 0 - 3
 80001e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000260 <main+0x98>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000260 <main+0x98>)
 80001e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80001ec:	6013      	str	r3, [r2, #0]
 GPIOC -> MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0); //set mode to 01 on pins 0 - 3, output
 80001ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000260 <main+0x98>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000260 <main+0x98>)
 80001f4:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80001f8:	6013      	str	r3, [r2, #0]
 GPIOC -> OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3); //set type to 0 on pins 0 -3
 80001fa:	4b19      	ldr	r3, [pc, #100]	@ (8000260 <main+0x98>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	4a18      	ldr	r2, [pc, #96]	@ (8000260 <main+0x98>)
 8000200:	f023 030f 	bic.w	r3, r3, #15
 8000204:	6053      	str	r3, [r2, #4]
 GPIOC -> OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1 | GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3); //speed is 0 on all 3 so hopefully blinking shows up
 8000206:	4b16      	ldr	r3, [pc, #88]	@ (8000260 <main+0x98>)
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	4a15      	ldr	r2, [pc, #84]	@ (8000260 <main+0x98>)
 800020c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000210:	6093      	str	r3, [r2, #8]
 GPIOC -> PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3); //no pull up/down on outputs
 8000212:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <main+0x98>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	4a12      	ldr	r2, [pc, #72]	@ (8000260 <main+0x98>)
 8000218:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800021c:	60d3      	str	r3, [r2, #12]


 while (1)
 {
   /* USER CODE END WHILE */
	for(int i = 0; i < 16; i++)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e016      	b.n	8000252 <main+0x8a>
	{
		for(int j = 50000; j>0; j--);	//delay
 8000224:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8000228:	603b      	str	r3, [r7, #0]
 800022a:	e002      	b.n	8000232 <main+0x6a>
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	3b01      	subs	r3, #1
 8000230:	603b      	str	r3, [r7, #0]
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	dcf9      	bgt.n	800022c <main+0x64>
		// REGISTER OUTPUT FOR GPIOC     CLEAR THE 1ST 4 PINS                                   0R IT WITH i, which is the counting variable
		GPIOC->ODR = (GPIOC->ODR & ~(GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3)) | (i & 0xF); //we only want to change the last 4 as a counter
 8000238:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <main+0x98>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f023 020f 	bic.w	r2, r3, #15
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	4906      	ldr	r1, [pc, #24]	@ (8000260 <main+0x98>)
 8000248:	4313      	orrs	r3, r2
 800024a:	614b      	str	r3, [r1, #20]
	for(int i = 0; i < 16; i++)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	dde5      	ble.n	8000224 <main+0x5c>
 8000258:	e7e1      	b.n	800021e <main+0x56>
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	48000800 	.word	0x48000800

08000264 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	@ 0x58
 8000268:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	@ 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f858 	bl	8001328 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]


 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800028a:	f000 fa2f 	bl	80006ec <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
 {
   Error_Handler();
 8000294:	f000 f82c 	bl	80002f0 <Error_Handler>
 }


 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000298:	2310      	movs	r3, #16
 800029a:	617b      	str	r3, [r7, #20]
 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	633b      	str	r3, [r7, #48]	@ 0x30
 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a4:	2360      	movs	r3, #96	@ 0x60
 80002a6:	637b      	str	r3, [r7, #52]	@ 0x34
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa71 	bl	8000798 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x5c>
 {
   Error_Handler();
 80002bc:	f000 f818 	bl	80002f0 <Error_Handler>
 }


 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	603b      	str	r3, [r7, #0]
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	607b      	str	r3, [r7, #4]
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60bb      	str	r3, [r7, #8]
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fe39 	bl	8000f50 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x84>
 {
   Error_Handler();
 80002e4:	f000 f804 	bl	80002f0 <Error_Handler>
 }
}
 80002e8:	bf00      	nop
 80002ea:	3758      	adds	r7, #88	@ 0x58
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <Error_Handler>:


void Error_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f4:	b672      	cpsid	i
}
 80002f6:	bf00      	nop


 __disable_irq();
 while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <Error_Handler+0x8>

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <HAL_MspInit+0x44>)
 8000304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000306:	4a0e      	ldr	r2, [pc, #56]	@ (8000340 <HAL_MspInit+0x44>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6613      	str	r3, [r2, #96]	@ 0x60
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <HAL_MspInit+0x44>)
 8000310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <HAL_MspInit+0x44>)
 800031c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800031e:	4a08      	ldr	r2, [pc, #32]	@ (8000340 <HAL_MspInit+0x44>)
 8000320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000324:	6593      	str	r3, [r2, #88]	@ 0x58
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <HAL_MspInit+0x44>)
 8000328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800032a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <NMI_Handler+0x4>

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <UsageFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f893 	bl	80004c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003cc:	f7ff ffea 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	@ (8000408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <LoopForever+0xe>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000414 <LoopForever+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 ff9f 	bl	8001338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003fa:	f7ff fee5 	bl	80001c8 <main>

080003fe <LoopForever>:

LoopForever:
    b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800040c:	080013e0 	.word	0x080013e0
  ldr r2, =_sbss
 8000410:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000414:	2000002c 	.word	0x2000002c

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>

0800041a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000420:	2300      	movs	r3, #0
 8000422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000424:	2003      	movs	r0, #3
 8000426:	f000 f91f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800042a:	200f      	movs	r0, #15
 800042c:	f000 f80e 	bl	800044c <HAL_InitTick>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	71fb      	strb	r3, [r7, #7]
 800043a:	e001      	b.n	8000440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800043c:	f7ff ff5e 	bl	80002fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000440:	79fb      	ldrb	r3, [r7, #7]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000458:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <HAL_InitTick+0x6c>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d023      	beq.n	80004a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <HAL_InitTick+0x70>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <HAL_InitTick+0x6c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800046e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000472:	fbb2 f3f3 	udiv	r3, r2, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f91d 	bl	80006b6 <HAL_SYSTICK_Config>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d10f      	bne.n	80004a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	d809      	bhi.n	800049c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000488:	2200      	movs	r2, #0
 800048a:	6879      	ldr	r1, [r7, #4]
 800048c:	f04f 30ff 	mov.w	r0, #4294967295
 8000490:	f000 f8f5 	bl	800067e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000494:	4a0a      	ldr	r2, [pc, #40]	@ (80004c0 <HAL_InitTick+0x74>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6013      	str	r3, [r2, #0]
 800049a:	e007      	b.n	80004ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800049c:	2301      	movs	r3, #1
 800049e:	73fb      	strb	r3, [r7, #15]
 80004a0:	e004      	b.n	80004ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	e001      	b.n	80004ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000008 	.word	0x20000008
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000004 	.word	0x20000004

080004c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <HAL_IncTick+0x20>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <HAL_IncTick+0x24>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4413      	add	r3, r2
 80004d4:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <HAL_IncTick+0x24>)
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000008 	.word	0x20000008
 80004e8:	20000028 	.word	0x20000028

080004ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  return uwTick;
 80004f0:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <HAL_GetTick+0x14>)
 80004f2:	681b      	ldr	r3, [r3, #0]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028

08000504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <__NVIC_SetPriorityGrouping+0x44>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000520:	4013      	ands	r3, r2
 8000522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800052c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000536:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <__NVIC_SetPriorityGrouping+0x44>)
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	60d3      	str	r3, [r2, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <__NVIC_GetPriorityGrouping+0x18>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	f003 0307 	and.w	r3, r3, #7
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	db0a      	blt.n	8000592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	490c      	ldr	r1, [pc, #48]	@ (80005b4 <__NVIC_SetPriority+0x4c>)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	0112      	lsls	r2, r2, #4
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	440b      	add	r3, r1
 800058c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000590:	e00a      	b.n	80005a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4908      	ldr	r1, [pc, #32]	@ (80005b8 <__NVIC_SetPriority+0x50>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	3b04      	subs	r3, #4
 80005a0:	0112      	lsls	r2, r2, #4
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	440b      	add	r3, r1
 80005a6:	761a      	strb	r2, [r3, #24]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b089      	sub	sp, #36	@ 0x24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	f1c3 0307 	rsb	r3, r3, #7
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	bf28      	it	cs
 80005da:	2304      	movcs	r3, #4
 80005dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3304      	adds	r3, #4
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	d902      	bls.n	80005ec <NVIC_EncodePriority+0x30>
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3b03      	subs	r3, #3
 80005ea:	e000      	b.n	80005ee <NVIC_EncodePriority+0x32>
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43da      	mvns	r2, r3
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	401a      	ands	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000604:	f04f 31ff 	mov.w	r1, #4294967295
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	43d9      	mvns	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	4313      	orrs	r3, r2
         );
}
 8000616:	4618      	mov	r0, r3
 8000618:	3724      	adds	r7, #36	@ 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3b01      	subs	r3, #1
 8000630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000634:	d301      	bcc.n	800063a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000636:	2301      	movs	r3, #1
 8000638:	e00f      	b.n	800065a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063a:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <SysTick_Config+0x40>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000642:	210f      	movs	r1, #15
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f7ff ff8e 	bl	8000568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <SysTick_Config+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000652:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <SysTick_Config+0x40>)
 8000654:	2207      	movs	r2, #7
 8000656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010

08000668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff47 	bl	8000504 <__NVIC_SetPriorityGrouping>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000690:	f7ff ff5c 	bl	800054c <__NVIC_GetPriorityGrouping>
 8000694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	6978      	ldr	r0, [r7, #20]
 800069c:	f7ff ff8e 	bl	80005bc <NVIC_EncodePriority>
 80006a0:	4602      	mov	r2, r0
 80006a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff5d 	bl	8000568 <__NVIC_SetPriority>
}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ffb0 	bl	8000624 <SysTick_Config>
 80006c4:	4603      	mov	r3, r0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006d4:	4b04      	ldr	r3, [pc, #16]	@ (80006e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40007000 	.word	0x40007000

080006ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006fa:	d130      	bne.n	800075e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006fc:	4b23      	ldr	r3, [pc, #140]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000708:	d038      	beq.n	800077c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2232      	movs	r2, #50	@ 0x32
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	0c9b      	lsrs	r3, r3, #18
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000730:	e002      	b.n	8000738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3b01      	subs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000744:	d102      	bne.n	800074c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f2      	bne.n	8000732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000758:	d110      	bne.n	800077c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800075a:	2303      	movs	r3, #3
 800075c:	e00f      	b.n	800077e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800076a:	d007      	beq.n	800077c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000774:	4a05      	ldr	r2, [pc, #20]	@ (800078c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800077a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40007000 	.word	0x40007000
 8000790:	20000000 	.word	0x20000000
 8000794:	431bde83 	.word	0x431bde83

08000798 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e3ca      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007aa:	4b97      	ldr	r3, [pc, #604]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f003 030c 	and.w	r3, r3, #12
 80007b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007b4:	4b94      	ldr	r3, [pc, #592]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 80e4 	beq.w	8000994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <HAL_RCC_OscConfig+0x4a>
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	2b0c      	cmp	r3, #12
 80007d6:	f040 808b 	bne.w	80008f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 8087 	bne.w	80008f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007e2:	4b89      	ldr	r3, [pc, #548]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <HAL_RCC_OscConfig+0x62>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e3a2      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a1a      	ldr	r2, [r3, #32]
 80007fe:	4b82      	ldr	r3, [pc, #520]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <HAL_RCC_OscConfig+0x7c>
 800080a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000812:	e005      	b.n	8000820 <HAL_RCC_OscConfig+0x88>
 8000814:	4b7c      	ldr	r3, [pc, #496]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800081a:	091b      	lsrs	r3, r3, #4
 800081c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000820:	4293      	cmp	r3, r2
 8000822:	d223      	bcs.n	800086c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a1b      	ldr	r3, [r3, #32]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fd1d 	bl	8001268 <RCC_SetFlashLatencyFromMSIRange>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e383      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000838:	4b73      	ldr	r3, [pc, #460]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a72      	ldr	r2, [pc, #456]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b70      	ldr	r3, [pc, #448]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	496d      	ldr	r1, [pc, #436]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000852:	4313      	orrs	r3, r2
 8000854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000856:	4b6c      	ldr	r3, [pc, #432]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	4968      	ldr	r1, [pc, #416]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000866:	4313      	orrs	r3, r2
 8000868:	604b      	str	r3, [r1, #4]
 800086a:	e025      	b.n	80008b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800086c:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a65      	ldr	r2, [pc, #404]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b63      	ldr	r3, [pc, #396]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	4960      	ldr	r1, [pc, #384]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000886:	4313      	orrs	r3, r2
 8000888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800088a:	4b5f      	ldr	r3, [pc, #380]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	495b      	ldr	r1, [pc, #364]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800089a:	4313      	orrs	r3, r2
 800089c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d109      	bne.n	80008b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fcdd 	bl	8001268 <RCC_SetFlashLatencyFromMSIRange>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e343      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008b8:	f000 fc4a 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 80008bc:	4602      	mov	r2, r0
 80008be:	4b52      	ldr	r3, [pc, #328]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	4950      	ldr	r1, [pc, #320]	@ (8000a0c <HAL_RCC_OscConfig+0x274>)
 80008ca:	5ccb      	ldrb	r3, [r1, r3]
 80008cc:	f003 031f 	and.w	r3, r3, #31
 80008d0:	fa22 f303 	lsr.w	r3, r2, r3
 80008d4:	4a4e      	ldr	r2, [pc, #312]	@ (8000a10 <HAL_RCC_OscConfig+0x278>)
 80008d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80008d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <HAL_RCC_OscConfig+0x27c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fdb5 	bl	800044c <HAL_InitTick>
 80008e2:	4603      	mov	r3, r0
 80008e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d052      	beq.n	8000992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	e327      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d032      	beq.n	800095e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80008f8:	4b43      	ldr	r3, [pc, #268]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a42      	ldr	r2, [pc, #264]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000904:	f7ff fdf2 	bl	80004ec <HAL_GetTick>
 8000908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800090a:	e008      	b.n	800091e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800090c:	f7ff fdee 	bl	80004ec <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2b02      	cmp	r3, #2
 8000918:	d901      	bls.n	800091e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e310      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800091e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f0      	beq.n	800090c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a36      	ldr	r2, [pc, #216]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	4931      	ldr	r1, [pc, #196]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000944:	4313      	orrs	r3, r2
 8000946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000948:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	492c      	ldr	r1, [pc, #176]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000958:	4313      	orrs	r3, r2
 800095a:	604b      	str	r3, [r1, #4]
 800095c:	e01a      	b.n	8000994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a29      	ldr	r2, [pc, #164]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800096a:	f7ff fdbf 	bl	80004ec <HAL_GetTick>
 800096e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000970:	e008      	b.n	8000984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000972:	f7ff fdbb 	bl	80004ec <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	2b02      	cmp	r3, #2
 800097e:	d901      	bls.n	8000984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000980:	2303      	movs	r3, #3
 8000982:	e2dd      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000984:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f0      	bne.n	8000972 <HAL_RCC_OscConfig+0x1da>
 8000990:	e000      	b.n	8000994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d074      	beq.n	8000a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d005      	beq.n	80009b2 <HAL_RCC_OscConfig+0x21a>
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	2b0c      	cmp	r3, #12
 80009aa:	d10e      	bne.n	80009ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d10b      	bne.n	80009ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d064      	beq.n	8000a88 <HAL_RCC_OscConfig+0x2f0>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d160      	bne.n	8000a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e2ba      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009d2:	d106      	bne.n	80009e2 <HAL_RCC_OscConfig+0x24a>
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e026      	b.n	8000a30 <HAL_RCC_OscConfig+0x298>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80009ea:	d115      	bne.n	8000a18 <HAL_RCC_OscConfig+0x280>
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a02      	ldr	r2, [pc, #8]	@ (8000a08 <HAL_RCC_OscConfig+0x270>)
 80009fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	e014      	b.n	8000a30 <HAL_RCC_OscConfig+0x298>
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	08001398 	.word	0x08001398
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004
 8000a18:	4ba0      	ldr	r3, [pc, #640]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b9d      	ldr	r3, [pc, #628]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a9c      	ldr	r2, [pc, #624]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a38:	f7ff fd58 	bl	80004ec <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a40:	f7ff fd54 	bl	80004ec <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b64      	cmp	r3, #100	@ 0x64
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e276      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a52:	4b92      	ldr	r3, [pc, #584]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f0      	beq.n	8000a40 <HAL_RCC_OscConfig+0x2a8>
 8000a5e:	e014      	b.n	8000a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a60:	f7ff fd44 	bl	80004ec <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a68:	f7ff fd40 	bl	80004ec <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b64      	cmp	r3, #100	@ 0x64
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e262      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a7a:	4b88      	ldr	r3, [pc, #544]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f0      	bne.n	8000a68 <HAL_RCC_OscConfig+0x2d0>
 8000a86:	e000      	b.n	8000a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d060      	beq.n	8000b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d005      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x310>
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2b0c      	cmp	r3, #12
 8000aa0:	d119      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d116      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x328>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e23f      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac0:	4b76      	ldr	r3, [pc, #472]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	061b      	lsls	r3, r3, #24
 8000ace:	4973      	ldr	r1, [pc, #460]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ad4:	e040      	b.n	8000b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d023      	beq.n	8000b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ade:	4b6f      	ldr	r3, [pc, #444]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aea:	f7ff fcff 	bl	80004ec <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000af0:	e008      	b.n	8000b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000af2:	f7ff fcfb 	bl	80004ec <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e21d      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b04:	4b65      	ldr	r3, [pc, #404]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f0      	beq.n	8000af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b10:	4b62      	ldr	r3, [pc, #392]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	061b      	lsls	r3, r3, #24
 8000b1e:	495f      	ldr	r1, [pc, #380]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b20:	4313      	orrs	r3, r2
 8000b22:	604b      	str	r3, [r1, #4]
 8000b24:	e018      	b.n	8000b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b26:	4b5d      	ldr	r3, [pc, #372]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b32:	f7ff fcdb 	bl	80004ec <HAL_GetTick>
 8000b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b38:	e008      	b.n	8000b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fcd7 	bl	80004ec <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d901      	bls.n	8000b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e1f9      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b4c:	4b53      	ldr	r3, [pc, #332]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f0      	bne.n	8000b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d03c      	beq.n	8000bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d01c      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b72:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b7c:	f7ff fcb6 	bl	80004ec <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fcb2 	bl	80004ec <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1d4      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0ef      	beq.n	8000b84 <HAL_RCC_OscConfig+0x3ec>
 8000ba4:	e01b      	b.n	8000bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bac:	4a3b      	ldr	r2, [pc, #236]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fc99 	bl	80004ec <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fc95 	bl	80004ec <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e1b7      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bd0:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ef      	bne.n	8000bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80a6 	beq.w	8000d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10d      	bne.n	8000c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	4a26      	ldr	r2, [pc, #152]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c14:	2301      	movs	r3, #1
 8000c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_RCC_OscConfig+0x508>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d118      	bne.n	8000c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <HAL_RCC_OscConfig+0x508>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_RCC_OscConfig+0x508>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c30:	f7ff fc5c 	bl	80004ec <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c38:	f7ff fc58 	bl	80004ec <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e17a      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_RCC_OscConfig+0x508>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d108      	bne.n	8000c70 <HAL_RCC_OscConfig+0x4d8>
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000c6e:	e029      	b.n	8000cc4 <HAL_RCC_OscConfig+0x52c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d115      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x50c>
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c8e:	4a03      	ldr	r2, [pc, #12]	@ (8000c9c <HAL_RCC_OscConfig+0x504>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000c98:	e014      	b.n	8000cc4 <HAL_RCC_OscConfig+0x52c>
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40007000 	.word	0x40007000
 8000ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000caa:	4a9b      	ldr	r2, [pc, #620]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cb4:	4b98      	ldr	r3, [pc, #608]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cba:	4a97      	ldr	r2, [pc, #604]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000cbc:	f023 0304 	bic.w	r3, r3, #4
 8000cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d016      	beq.n	8000cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fc0e 	bl	80004ec <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cd2:	e00a      	b.n	8000cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fc0a 	bl	80004ec <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e12a      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cea:	4b8b      	ldr	r3, [pc, #556]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0ed      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x53c>
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fbf7 	bl	80004ec <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d00:	e00a      	b.n	8000d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d02:	f7ff fbf3 	bl	80004ec <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e113      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d18:	4b7f      	ldr	r3, [pc, #508]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1ed      	bne.n	8000d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d26:	7ffb      	ldrb	r3, [r7, #31]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d105      	bne.n	8000d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d30:	4a79      	ldr	r2, [pc, #484]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80fe 	beq.w	8000f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	f040 80d0 	bne.w	8000eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000d4c:	4b72      	ldr	r3, [pc, #456]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d130      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d127      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d11f      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000d8c:	2a07      	cmp	r2, #7
 8000d8e:	bf14      	ite	ne
 8000d90:	2201      	movne	r2, #1
 8000d92:	2200      	moveq	r2, #0
 8000d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d113      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000da4:	085b      	lsrs	r3, r3, #1
 8000da6:	3b01      	subs	r3, #1
 8000da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d109      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	085b      	lsrs	r3, r3, #1
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d06e      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d069      	beq.n	8000e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d105      	bne.n	8000de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000dd4:	4b50      	ldr	r3, [pc, #320]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0ad      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000de4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000df0:	f7ff fb7c 	bl	80004ec <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df8:	f7ff fb78 	bl	80004ec <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e09a      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e0a:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <HAL_RCC_OscConfig+0x784>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000e26:	3a01      	subs	r2, #1
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	4311      	orrs	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e30:	0212      	lsls	r2, r2, #8
 8000e32:	4311      	orrs	r1, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000e38:	0852      	lsrs	r2, r2, #1
 8000e3a:	3a01      	subs	r2, #1
 8000e3c:	0552      	lsls	r2, r2, #21
 8000e3e:	4311      	orrs	r1, r2
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e44:	0852      	lsrs	r2, r2, #1
 8000e46:	3a01      	subs	r2, #1
 8000e48:	0652      	lsls	r2, r2, #25
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000e50:	0912      	lsrs	r2, r2, #4
 8000e52:	0452      	lsls	r2, r2, #17
 8000e54:	430a      	orrs	r2, r1
 8000e56:	4930      	ldr	r1, [pc, #192]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2d      	ldr	r2, [pc, #180]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e68:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e74:	f7ff fb3a 	bl	80004ec <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7c:	f7ff fb36 	bl	80004ec <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e058      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e8e:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e9a:	e050      	b.n	8000f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e04f      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d148      	bne.n	8000f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000ec4:	f7ff fb12 	bl	80004ec <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ecc:	f7ff fb0e 	bl	80004ec <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e030      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0x734>
 8000eea:	e028      	b.n	8000f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d023      	beq.n	8000f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_RCC_OscConfig+0x780>)
 8000ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efe:	f7ff faf5 	bl	80004ec <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f04:	e00c      	b.n	8000f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f06:	f7ff faf1 	bl	80004ec <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d905      	bls.n	8000f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e013      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_RCC_OscConfig+0x7b0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ec      	bne.n	8000f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_RCC_OscConfig+0x7b0>)
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	4905      	ldr	r1, [pc, #20]	@ (8000f48 <HAL_RCC_OscConfig+0x7b0>)
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_RCC_OscConfig+0x7b4>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	60cb      	str	r3, [r1, #12]
 8000f38:	e001      	b.n	8000f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	feeefffc 	.word	0xfeeefffc

08000f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0e7      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f64:	4b75      	ldr	r3, [pc, #468]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d910      	bls.n	8000f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f72:	4b72      	ldr	r3, [pc, #456]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 0207 	bic.w	r2, r3, #7
 8000f7a:	4970      	ldr	r1, [pc, #448]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f82:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d001      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0cf      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d010      	beq.n	8000fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d908      	bls.n	8000fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb0:	4b63      	ldr	r3, [pc, #396]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4960      	ldr	r1, [pc, #384]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d04c      	beq.n	8001068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d121      	bne.n	8001026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0a6      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d107      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	4b54      	ldr	r3, [pc, #336]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d115      	bne.n	8001026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e09a      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d107      	bne.n	8001016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001006:	4b4e      	ldr	r3, [pc, #312]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e08e      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001016:	4b4a      	ldr	r3, [pc, #296]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e086      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001026:	4b46      	ldr	r3, [pc, #280]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f023 0203 	bic.w	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4943      	ldr	r1, [pc, #268]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001034:	4313      	orrs	r3, r2
 8001036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001038:	f7ff fa58 	bl	80004ec <HAL_GetTick>
 800103c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103e:	e00a      	b.n	8001056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff fa54 	bl	80004ec <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104e:	4293      	cmp	r3, r2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e06e      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001056:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 020c 	and.w	r2, r3, #12
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	429a      	cmp	r2, r3
 8001066:	d1eb      	bne.n	8001040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d010      	beq.n	8001096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001080:	429a      	cmp	r2, r3
 8001082:	d208      	bcs.n	8001096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001084:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	492b      	ldr	r1, [pc, #172]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d210      	bcs.n	80010c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 0207 	bic.w	r2, r3, #7
 80010ac:	4923      	ldr	r1, [pc, #140]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <HAL_RCC_ClockConfig+0x1ec>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e036      	b.n	8001134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	4918      	ldr	r1, [pc, #96]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4910      	ldr	r1, [pc, #64]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001104:	f000 f824 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 8001108:	4602      	mov	r2, r0
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_RCC_ClockConfig+0x1f0>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	490b      	ldr	r1, [pc, #44]	@ (8001144 <HAL_RCC_ClockConfig+0x1f4>)
 8001116:	5ccb      	ldrb	r3, [r1, r3]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_RCC_ClockConfig+0x1f8>)
 8001122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_RCC_ClockConfig+0x1fc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f98f 	bl	800044c <HAL_InitTick>
 800112e:	4603      	mov	r3, r0
 8001130:	72fb      	strb	r3, [r7, #11]

  return status;
 8001132:	7afb      	ldrb	r3, [r7, #11]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40022000 	.word	0x40022000
 8001140:	40021000 	.word	0x40021000
 8001144:	08001398 	.word	0x08001398
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b3e      	ldr	r3, [pc, #248]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4b3b      	ldr	r3, [pc, #236]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0x34>
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b0c      	cmp	r3, #12
 800117c:	d121      	bne.n	80011c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d11e      	bne.n	80011c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001184:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001190:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e005      	b.n	80011ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80011ac:	4a2b      	ldr	r2, [pc, #172]	@ (800125c <HAL_RCC_GetSysClockFreq+0x10c>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10d      	bne.n	80011d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d102      	bne.n	80011ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80011c8:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x110>)
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	e004      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_RCC_GetSysClockFreq+0x114>)
 80011d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d134      	bne.n	8001248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d003      	beq.n	80011fc <HAL_RCC_GetSysClockFreq+0xac>
 80011f4:	e005      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x110>)
 80011f8:	617b      	str	r3, [r7, #20]
      break;
 80011fa:	e005      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_RCC_GetSysClockFreq+0x114>)
 80011fe:	617b      	str	r3, [r7, #20]
      break;
 8001200:	e002      	b.n	8001208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	617b      	str	r3, [r7, #20]
      break;
 8001206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	3301      	adds	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	fb03 f202 	mul.w	r2, r3, r2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_RCC_GetSysClockFreq+0x108>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	0e5b      	lsrs	r3, r3, #25
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	3301      	adds	r3, #1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001248:	69bb      	ldr	r3, [r7, #24]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	@ 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	080013a8 	.word	0x080013a8
 8001260:	00f42400 	.word	0x00f42400
 8001264:	007a1200 	.word	0x007a1200

08001268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001280:	f7ff fa26 	bl	80006d0 <HAL_PWREx_GetVoltageRange>
 8001284:	6178      	str	r0, [r7, #20]
 8001286:	e014      	b.n	80012b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	4a24      	ldr	r2, [pc, #144]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001292:	6593      	str	r3, [r2, #88]	@ 0x58
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80012a0:	f7ff fa16 	bl	80006d0 <HAL_PWREx_GetVoltageRange>
 80012a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012b8:	d10b      	bne.n	80012d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b80      	cmp	r3, #128	@ 0x80
 80012be:	d919      	bls.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80012c4:	d902      	bls.n	80012cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	e013      	b.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e010      	b.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b80      	cmp	r3, #128	@ 0x80
 80012d6:	d902      	bls.n	80012de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80012d8:	2303      	movs	r3, #3
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e00a      	b.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b80      	cmp	r3, #128	@ 0x80
 80012e2:	d102      	bne.n	80012ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e004      	b.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b70      	cmp	r3, #112	@ 0x70
 80012ee:	d101      	bne.n	80012f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012f0:	2301      	movs	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 0207 	bic.w	r2, r3, #7
 80012fc:	4909      	ldr	r1, [pc, #36]	@ (8001324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	40022000 	.word	0x40022000

08001328 <memset>:
 8001328:	4402      	add	r2, r0
 800132a:	4603      	mov	r3, r0
 800132c:	4293      	cmp	r3, r2
 800132e:	d100      	bne.n	8001332 <memset+0xa>
 8001330:	4770      	bx	lr
 8001332:	f803 1b01 	strb.w	r1, [r3], #1
 8001336:	e7f9      	b.n	800132c <memset+0x4>

08001338 <__libc_init_array>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	4d0d      	ldr	r5, [pc, #52]	@ (8001370 <__libc_init_array+0x38>)
 800133c:	4c0d      	ldr	r4, [pc, #52]	@ (8001374 <__libc_init_array+0x3c>)
 800133e:	1b64      	subs	r4, r4, r5
 8001340:	10a4      	asrs	r4, r4, #2
 8001342:	2600      	movs	r6, #0
 8001344:	42a6      	cmp	r6, r4
 8001346:	d109      	bne.n	800135c <__libc_init_array+0x24>
 8001348:	4d0b      	ldr	r5, [pc, #44]	@ (8001378 <__libc_init_array+0x40>)
 800134a:	4c0c      	ldr	r4, [pc, #48]	@ (800137c <__libc_init_array+0x44>)
 800134c:	f000 f818 	bl	8001380 <_init>
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	2600      	movs	r6, #0
 8001356:	42a6      	cmp	r6, r4
 8001358:	d105      	bne.n	8001366 <__libc_init_array+0x2e>
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001360:	4798      	blx	r3
 8001362:	3601      	adds	r6, #1
 8001364:	e7ee      	b.n	8001344 <__libc_init_array+0xc>
 8001366:	f855 3b04 	ldr.w	r3, [r5], #4
 800136a:	4798      	blx	r3
 800136c:	3601      	adds	r6, #1
 800136e:	e7f2      	b.n	8001356 <__libc_init_array+0x1e>
 8001370:	080013d8 	.word	0x080013d8
 8001374:	080013d8 	.word	0x080013d8
 8001378:	080013d8 	.word	0x080013d8
 800137c:	080013dc 	.word	0x080013dc

08001380 <_init>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr

0800138c <_fini>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr
